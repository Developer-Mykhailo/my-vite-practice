{"version":3,"file":"todo.js","sources":["../src/js/todo.js"],"sourcesContent":["// Створи перелік справ.\n// Є інпут, в який вводиться назва завдання.\n// Після натискання на кнопку \"Додати\" завдання додається до списку #list.\n// Список із завданнями має бути доступним після перезавантаження сторінки.\n// * Поруч із кожним завданням знаходиться кнопка \"Видалити\", щоб можна було\n// Забрати завдання зі списку.\n\n// import iziToast from 'izitoast';\n// import 'izitoast/dist/css/iziToast.min.css';\n// import { refs } from './refs';\n// import { getFromLs, saveInLs } from './storage';\n\n// const LS_TASK_KEY = 'list to do';\n\n// let tasks = getFromLs(LS_TASK_KEY) || [];\n// refs.taskList.innerHTML = createTasksMarkup(tasks);\n\n// refs.taskForm.addEventListener('submit', addTask);\n// refs.taskList.addEventListener('click', deleteTask);\n\n// function addTask(event) {\n//   event.preventDefault();\n//   const inputData = event.target.elements.taskName.value.trim();\n\n//   if (!inputData) {\n//     iziToast.warning({\n//       message: 'Enter something for adding',\n//       position: 'center',\n//     });\n//     return;\n//   }\n//   const oneTask = { text: inputData, id: Date.now() };\n//   tasks.push(oneTask);\n\n//   saveInLs(LS_TASK_KEY, tasks);\n//   refs.taskList.innerHTML = createTasksMarkup(tasks);\n\n//   refs.taskForm.reset();\n// }\n\n// function deleteTask(event) {\n//   if (event.target.nodeName !== 'BUTTON') {\n//     return;\n//   }\n//   tasks = tasks.filter(task => task.id !== +event.target.id);\n//   refs.taskList.innerHTML = createTasksMarkup(tasks);\n//   saveInLs(LS_TASK_KEY, tasks);\n// }\n\n// function createTasksMarkup(arr) {\n//   return arr\n//     .map(\n//       ({ text, id }) => `\n//         <li>${text} <button id=\"${id}\">delete</button></li>\n//         `\n//     )\n//     .join('');\n// }\n\n//!==============================================================\n// Створи перелік справ.\n// Є інпут, в який вводиться назва завдання.\n// Після натискання на кнопку \"Додати\" завдання додається до списку #list.\n// Список із завданнями має бути доступним після перезавантаження сторінки.\n// * Поруч із кожним завданням знаходиться кнопка \"Видалити\", щоб можна було\n// Забрати завдання зі списку.\n// import iziToast from 'izitoast';\n// import 'izitoast/dist/css/iziToast.min.css';\n\n// import { refs } from './refs';\n// import { saveInLs, getFromLs } from './storage';\n\n// const KEY_LS_TASKS = 'list of tasks';\n// let tasks = getFromLs(KEY_LS_TASKS) || [];\n// refs.taskList.innerHTML = createMarkupForTask(tasks);\n// refs.taskForm.taskName.focus();\n\n// refs.taskForm.addEventListener('submit', addTask);\n// refs.taskList.addEventListener('click', deleteTask);\n// refs.taskList.addEventListener('click', changetask);\n\n// let taskFromPromt = '';\n\n// function addTask(event, fromPromt) {\n//   event.preventDefault();\n\n//   const inputValue = event.target.elements.taskName.value.trim() || fromPromt;\n//   if (!inputValue) {\n//     iziToast.warning({\n//       message: 'The field is empty',\n//       position: 'center',\n//     });\n//     return;\n//   }\n//   const oneTask = { text: inputValue, id: Date.now() };\n//   const taskExist = tasks.some(item => item.text === oneTask.text);\n//   if (taskExist) {\n//     iziToast.warning({\n//       message: 'This task exists already',\n//       position: 'center',\n//     });\n//     refs.taskForm.reset();\n//     return;\n//   }\n\n//   tasks.push(oneTask);\n//   saveInLs(KEY_LS_TASKS, tasks);\n\n//   refs.taskList.innerHTML = createMarkupForTask(tasks);\n//   refs.taskForm.reset();\n//   refs.taskForm.taskName.focus();\n// }\n// //---------------------------------------------------------------\n// function deleteTask(event) {\n//   if (event.target.nodeName !== 'BUTTON') {\n//     return;\n//   }\n//   tasks = tasks.filter(task => task.id !== +event.target.id);\n//   refs.taskList.innerHTML = createMarkupForTask(tasks);\n//   saveInLs(KEY_LS_TASKS, tasks);\n// }\n\n// //---------------------------------------------------------------\n// //!==============================================================\n// //!==============================================================\n// //!==============================================================\n// function changetask(event) {\n//   const isInside = event.target.closest('[data-id]');\n//   if (!isInside) {\n//     return;\n//   }\n\n//   taskFromPromt = prompt('Enter new task');\n\n//   console.log(taskFromPromt);\n//   addTask(taskFromPromt);\n// }\n\n// //---------------------------------------------------------------\n\n// function createMarkupForTask(arr) {\n//   return arr\n//     .map(\n//       ({ text, id }) =>\n//         `<li> ${text} </br>\n//             <button data-id=\"${(id * 0.5).toFixed()}\">Chenge</button>\n//             <button id=\"${id}\">delete</button>\n//         </li>`\n//     )\n//     .join('');\n// }\n"],"names":[],"mappings":"wFA2DA;"}